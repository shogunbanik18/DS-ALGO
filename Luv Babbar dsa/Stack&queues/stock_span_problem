#include <bits/stdc++.h>
using namespace std;

vector<int> stockSpanner(vector<int> &a){
	stack <int> s;
	int n = a.size();
	s.push(0);
	vector<int> arr(n, 1);
	for (int i = 1; i < n; i++) {
		while (!s.empty() and a[s.top()] <= a[i]) {
			s.pop();
		}
		if (!s.empty()) {
			arr[i] = i - s.top();
		} else arr[i] = i + 1;
		s.push(i);
	}
	return arr;
}


// full solution //

#include <bits/stdc++.h>
using namespace std;

void stockspan(int prices[], int n, int span[])
{
    stack<int> s;
    // indices of days
    s.push(0);
    span[0] = 1;

    for (int i = 1; i <= n - 1; i++)
    {
        int currentprice = prices[i];
        while (!s.empty() and prices[s.top()] <= currentprice)
        {
            s.pop();
        }

        if (!s.empty())
        {
            int prev = s.top();
            span[i] = i - prev;
        }
        else
        {
            span[i] = i + 1;
        }
        s.push(i);
    }
}

int main()
{
    int prices[] = {100, 80, 60, 70, 60, 75, 85};
    int n = sizeof(prices) / sizeof(int);
    int span[100000] = {0};
    stockspan(prices, n, span);
    for (int i = 0; i < n; i++)
    {
        cout << span[i] << " ";
    }
}
