// class Solution
// {
//   public:    
//       vector<int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
//       {
//           vector<int> common;
//           int i=0;
//           int j=0;
//           int k=0;
//           while(i<n1 && j<n2 && k<n3)
//           {
//               if(A[i]==B[j] && B[j]==C[k])
//               {
//                   if(common.size()== 0 || A[i]!=common.at(common.size()-1))
//                       common.push_back(A[i]);
//                   i++;
//                   j++;
//                   k++;
//               }
//               else if(A[i]<B[j] && A[i]<C[k])
//                   i++;
//               else if(B[j]<A[i] && B[j]<C[k])
//                   j++;
//               else if(C[k]<A[i] && C[k]<B[j])
//                   k++;
//               else if(A[i]==B[j])
//               {
//                   i++;
//                   j++;
//               }
//               else if(B[j]==C[k])
//               {
//                   j++;
//                   k++;
//               }
//               else
//               {
//                   i++;
//                   k++;
//               }
//           }
//           return common;
//       }
// };

class Solution
{
    public:    
       vector <int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
        {
            //code here.
            vector<int> common;
            int i = 0;
            while(i<n1) {
                int element = A[i];
                if(binary_search(B,B+n2,element) && binary_search(C,C+n3,element)) {
                    common.push_back(element);
                }
                while(i<n1 && A[i]==element) {
                    i++;
                }
            }
            return common;
        }
};
