#include <bits/stdc++.h>
using namespace std;

// merging
int merge(int arr[], int temp[], int left, int mid, int right)
{
    int i, j, k;
    int inv_count = 0;
    i = left, j = mid, k = right;
    while ((i <= mid - 1) and (j <= right))
    {
        if (arr[i] <= arr[j])
        {
            temp[k] = arr[i];
            i++;
            k++;
        }
        else
        {
            temp[k] = arr[j];
            k++;
            j++;
            inv_count = inv_count + (mid - i);
        }
    }

    while (i <= mid - 1)
    {
        temp[k++] = arr[i++];
    }

    while (j <= right)
    {
        temp[k++] = arr[j++];
    }

    for (i = left; i <= right; i++)
    {
        arr[i] = temp[i];
    }
    return inv_count;
}

int mergesort(int arr[], int temp[], int left, int right)
{
    int mid;
    int inv_count = 0;

    if (left < right)
    {
        mid = (left + right) / 2;
        inv_count = inv_count + mergesort(arr, temp, left, mid);
        inv_count = inv_count + mergesort(arr, temp, mid + 1, right);
        inv_count = inv_count + merge(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}

int main()
{
    // int arr[] = {5, 3, 2, 4, 1};
    int arr[] = {2, 4, 1, 3, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int temp[n];
    int ans = mergesort(arr, temp, 0, n - 1);
    cout << "Number of inversion are " << ans;
    return 0;
}


// O(N^2) Solution //
long long int inversionCount(long long arr[], long long N)
   {
       int count=0;
       for(int i=0;i<N;i++)
       {
          for(int j=i+1;j<N;j++)
          {
           if(arr[i]>arr[j])
           {
               count++;
              if(arr[i]==arr[j])
              {
                  return 0;
              }
           }
          }
      }
       return count;
     }
