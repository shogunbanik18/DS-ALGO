// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

string isSubset(int a1[], int a2[], int n, int m) ;

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n, m;
        cin >> n >> m;
        int a1[n], a2[m];

        for (int i = 0; i < n; i++) {
            cin >> a1[i];
        }
        for (int i = 0; i < m; i++) {
            cin >> a2[i];
        }

        cout << isSubset(a1, a2, n, m) << endl;
    }
    return 0;
}
// } Driver Code Ends


string isSubset(int a1[], int a2[], int n, int m) 
{
    // using concept of set 
    // set<int>s;
    // for(int i=0;i<n;i++)
    // {
    //     s.insert(a1[i]);
    // }
    
    // for(int j=0;j<m;j++)
    // {
    //     if(s.find(a2[j])==s.end())
    //     {
    //         return "No";
    //     }
    // }
    // return "Yes";
    
    // using map 
    
    // unordered_map<int,int>mp;
    // for(int i=0;i<n;i++)
    // {
    //     mp[a1[i]]++;
    // }
    //  for(int j=0;j<m;j++)
    // {
    //     mp[a2[j]]++;
    // }
    
    // unordered_map<int,int>::iterator it;
    // for(int i=0;i<m;i++)
    // {
    //     it=mp.find(a2[i]);
    //     if(it->second==1)
    //     {
    //         return "No";
    //     }
    // }
    // return "Yes";
    
   // another apporach using map // 
   unordered_map<int,int> mp;
   bool flag=true;
   for(int i=0;i<n;i++)
   {
       mp[a1[i]]++;
   }
   
   for(int i=0;i<m;i++)
   {
       
       if(mp.find(a2[i])!=mp.end())
       {
            continue;
       }
       else 
       {
           flag=false;
       }
   }
   
   if(flag==true)
   {
        return "Yes";
   }
   else 
   {
       return "No";
   }
}
