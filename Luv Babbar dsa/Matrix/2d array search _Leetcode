// // O(n^2)
class Solution {
public:
//     bool searchMatrix(vector<vector<int>>& matrix, int target) 
//     {
//         int m=matrix.size();
//         int n=matrix[0].size();
//         for(int i=0;i<m;i++)
//         {
//             for(int j=0;j<n;j++)
//             {
//                 if(matrix[i][j]==target)
//                 {
//                     return true;
//                 }
//             }
//         }
//         return false;
//     }
    
// };

// O(M+N) //

    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = 0;
        int n = matrix[0].size() - 1;
        while(m < matrix.size() && n >= 0)
        {
            if(matrix[m][n] == target) return true;
            if(matrix[m][n] > target) n = n - 1;
            else  m = m + 1;
        }
        return false;
    }


o(mlog n)
// bool find(vector<int> &nums,int target)
// {
//     int i=0;
//     int j=nums.size()-1;
//     while(i<=j)
//     {
//         int mid=(i+j)/2;
//         if(nums[mid]==target)
//         {
//             return true;
//         }
//         else if(nums[mid]>target)
//         {
//             j=mid-1;
//         }
//         else
//         {
//             i=mid+1;
//         }
//     }
//     return false;
// }


// class Solution {
// public:
//     bool searchMatrix(vector<vector<int>>& matrix, int target) 
//     {
//         for(int i=0;i<matrix.size();i++)
//         {
//             if(find(matrix[i],target))
//             {
//                 return true;
//             }
//         }
//         return false;
//     }
       
};
