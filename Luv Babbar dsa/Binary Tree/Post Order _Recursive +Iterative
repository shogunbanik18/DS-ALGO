// Preorder Traversal of Binary Tree
#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int data;
    Node *left;
    Node *right;

    Node(int data)
    {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};

// Recursive Approach
void postorder(Node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

// Iterative Approach
void postorder2(Node *root)
{
    if (root == nullptr)
    {
        return;
    }

    stack<Node *> s;
    s.push(root);
    stack<int> out;
    while (!s.empty())
    {
        Node *curr = s.top();
        s.pop();
        out.push(curr->data);

        if (curr->left)
        {
            s.push(curr->left);
        }

        if (curr->right)
        {
            s.push(curr->right);
        }
    }

    while (!out.empty())
    {
        cout << out.top() << " ";
        out.pop();
    }
}

int main()
{
    Node *root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->right->left = new Node(5);
    root->right->right = new Node(6);
    root->right->left->left = new Node(7);
    root->right->left->right = new Node(8);
    // postorder(root);
    postorder2(root);
    return 0;
}
