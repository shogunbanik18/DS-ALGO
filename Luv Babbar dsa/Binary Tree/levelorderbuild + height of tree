#include <bits/stdc++.h>
using namespace std;

// input : 1 2 4 -1 -1 5 7 -1 -1 -1 3 -1 6 -1 -1
// output
// preorder : 1 2 4 5 7 3 6
// inorder : 4,2,7,5,1,3,6
// postorder : 4,7,5,2,6,3,1

class Node
{
public:
    int data;
    Node *left;
    Node *right;
    Node(int d)
    {
        data = d;
        left = right = NULL;
    }
};

// preorder Build of Tree
// using  a function
Node *buildtree()
{
    int d;
    cin >> d;

    if (d == -1)
    {
        return NULL;
    }

    Node *n = new Node(d);
    // using recursion
    n->left = buildtree();
    n->right = buildtree();
    return n;
}

// printing the tree
// preorder traversal
void printpreorder(Node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }

    cout << root->data << " ";
    printpreorder(root->left);
    printpreorder(root->right);
}

// inorder traversal
void printinorder(Node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }

    printinorder(root->left);
    cout << root->data << " ";
    printinorder(root->right);
}

// Postorder traversal
void printpostorder(Node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }

    printpostorder(root->left);
    printpostorder(root->right);
    cout << root->data << " ";
}

//  level order traversal
void levelorderprint(Node *root)
{
    // queue FIFO
    // breadth first traversal
    queue<Node *> q;
    q.push(root);
    q.push(NULL);

    while (!q.empty())
    {
        Node *temp = q.front();
        if (temp == NULL)
        {
            cout << endl;
            q.pop();
            // inseting new null for next level
            if (!q.empty())
            {
                q.push(NULL);
            }
        }

        else
        {
            q.pop();
            cout << temp->data << " ";
            if (temp->left)
            {
                q.push(temp->left);
            }
            if (temp->right)
            {
                q.push(temp->right);
            }
        }
    }
    return;
}

//  level order build
Node *levelorderbuild()
{
    // using FIFO
    // Queue

    int d;
    cin >> d;
    Node *root = new Node(d);

    queue<Node *> q;
    q.push(root);

    while (!q.empty())
    {
        Node *current = q.front();
        q.pop();

        int c1, c2;
        cin >> c1 >> c2;

        if (c1 != -1)
        {
            current->left = new Node(c1);
            q.push(current->left);
        }

        if (c2 != -1)
        {
            current->right = new Node(c2);
            q.push(current->right);
        }
    }
    return root;
}

int height(Node *root)
{
    if (root == NULL)
    {
        return 0;
    }
    int h1 = height(root->left);
    int h2 = height(root->right);
    return 1 + max(h1, h2);
}

int main()
{
    // Node *root = buildtree();
    Node *root = levelorderbuild();
    // printpreorder(root);
    // printinorder(root);
    // printpostorder(root);

    levelorderprint(root);
    cout << height(root);
}
