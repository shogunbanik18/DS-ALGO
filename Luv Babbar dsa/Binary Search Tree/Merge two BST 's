/*
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution
{
    public:
    //Function to return a list of integers denoting the node 
    //values of both the BST in a sorted order.
    
    // inorder traversal results in sorted order 
    void inorder(Node*root,vector<int>&v)
    {
        if(root==NULL)
        {
            return ;
        }
        inorder(root->left,v);
        v.push_back(root->data);
        inorder(root->right,v);
    }
    
    vector<int> merge(Node *root1, Node *root2)
    {
        vector<int>a;
        vector<int>b;
        vector<int>res;
        inorder(root1,a);
        inorder(root2,b);
        int n=a.size();
        int m=b.size();
        int i=0;
        int j=0;
        while(i<n and j<m)
        {
            if(a[i]<=b[j])
            {
                res.push_back(a[i]);
                i++;
            }
            else if(a[i]>b[j])
            {
                res.push_back(b[j]);
                j++;
            }
        }
        
        while(j<m)
        {
            res.push_back(b[j]);
            j++;
        }
        
        while(i<n)
        {
            res.push_back(a[i]);
            i++;
        }
        
        return res;
        //Your code here
    }
};
