#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int key;
    Node *left;
    Node *right;

    Node(int key)
    {
        this->key = key;
        left = right = NULL;
    }
};

// inorder traversal
Node *insert(Node *root, int key)
{
    // base case
    if (root == NULL)
    {
        return new Node(key);
    }

    // recursive case
    if (key < root->key)
    {
        root->left = insert(root->left, key);
    }
    else
    {
        root->right = insert(root->right, key);
    }
    return root;
}

// O(H) Time complexity
// log(N)<=O(H)<=N Depends on the structure if the binary tree
bool search(Node *root, int key)
{
    if (root == NULL)
    {
        return false;
    }

    if (key == root->key)
    {
        return true;
    }

    if (key < root->key)
    {
        return search(root->left, key);
    }
    else if (key > root->key)
    {
        return search(root->right, key);
    }
}

void printInOrder(Node *root)
{
    if (root == NULL)
    {
        return;
    }

    // left,root,right
    printInOrder(root->left);
    cout << root->key << " ,";
    printInOrder(root->right);
}

Node *findMin(Node *root)
{
    while (root->left != NULL)
    {
        root = root->left;
    }
    return root;
}

// BST Deletion
Node *remove(Node *root, int key)
{
    if (root == NULL)
    {
        return NULL;
    }

    else if (key < root->key)
    {
        root->left = remove(root->left, key);
    }

    else if (key > root->key)
    {
        root->right = remove(root->right, key);
    }

    else
    {
        // case 1:   0 children
        if (root->left == NULL and root->right == NULL)
        {
            delete root;
            root = NULL;
        }

        // case 2:   1 children
        else if (root->left == NULL)
        {
            Node *temp = root;
            root = root->right;
            delete temp;
        }

        else if (root->right == NULL)
        {
            Node *temp = root;
            root = root->left;
            delete temp;
        }

        // case 3:   2 children
        else
        {
            Node *temp = findMin(root->right);
            root->key = temp->key;
            root->right = remove(root->right, temp->key);
        }
        return root;
    }
}

int main()
{
    Node *root = NULL;
    int arr[] = {8, 3, 10, 1, 6, 14, 4, 7, 13};

    for (int x : arr)
    {
        root = insert(root, x);
    }
    int key;
    cin >> key;
    printInOrder(root);
    cout << endl;
    cout << search(root, key) << endl;
    root = remove(root, key);
    printInOrder(root);
    return 0;
}
