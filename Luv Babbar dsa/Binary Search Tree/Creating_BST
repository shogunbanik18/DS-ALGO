#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int key;
    Node *left;
    Node *right;

    Node(int key)
    {
        this->key = key;
        left = right = NULL;
    }
};

// inorder traversal
Node *insert(Node *root, int key)
{
    // base case
    if (root == NULL)
    {
        return new Node(key);
    }

    // recursive case
    if (key < root->key)
    {
        root->left = insert(root->left, key);
    }
    else
    {
        root->right = insert(root->right, key);
    }
    return root;
}

bool search(Node *root, int key)
{
    if (root == NULL)
    {
        cout << "Not Found"
             << " ";
    }

    if (key == root->key)
    {
        cout << "Element is found ";
    }

    if (key < root->key)
    {
        search(root->left, key);
    }
    else if (key > root->key)
    {
        search(root->right, key);
    }
}

void printInOrder(Node *root)
{
    if (root == NULL)
    {
        return;
    }

    // left,root,right
    printInOrder(root->left);
    cout << root->key << " ,";
    printInOrder(root->right);
}

int main()
{
    Node *root = NULL;
    int arr[] = {8, 3, 10, 1, 6, 14, 4, 7, 13};

    for (int x : arr)
    {
        root = insert(root, x);
    }
    printInOrder(root);
    cout << endl;
    search(root, 19);
    return 0;
}
