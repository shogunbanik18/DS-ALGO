#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int key;
    Node *left;
    Node *right;

    Node(int key)
    {
        this->key = key;
        left = right = NULL;
    }
};

// inorder traversal
Node *insert(Node *root, int key)
{
    // base case
    if (root == NULL)
    {
        return new Node(key);
    }

    // recursive case
    if (key < root->key)
    {
        root->left = insert(root->left, key);
    }
    else
    {
        root->right = insert(root->right, key);
    }
    return root;
}

// O(H) Time complexity
// log(N)<=O(H)<=N Depends on the structure if the binary tree
bool search(Node *root, int key)
{
    if (root == NULL)
    {
        return false;
    }

    if (key == root->key)
    {
        return true;
    }

    if (key < root->key)
    {
        return search(root->left, key);
    }
    else if (key > root->key)
    {
        return search(root->right, key);
    }
}

void printInOrder(Node *root)
{
    if (root == NULL)
    {
        return;
    }

    // left,root,right
    printInOrder(root->left);
    cout << root->key << " ,";
    printInOrder(root->right);
}

Node *findMin(Node *root)
{
    while (root->left != NULL)
    {
        root = root->left;
    }
    return root;
}

// BST Deletion
Node *remove(Node *root, int key)
{
    if (root == NULL)
    {
        return NULL;
    }

    else if (key < root->key)
    {
        root->left = remove(root->left, key);
    }

    else if (key > root->key)
    {
        root->right = remove(root->right, key);
    }

    else
    {
        // case 1:   0 children
        if (root->left == NULL and root->right == NULL)
        {
            delete root;
            root = NULL;
        }

        // case 2:   1 children
        else if (root->left == NULL)
        {
            Node *temp = root;
            root = root->right;
            delete temp;
        }

        else if (root->right == NULL)
        {
            Node *temp = root;
            root = root->left;
            delete temp;
        }

        // case 3:   2 children
        else
        {
            Node *temp = findMin(root->right);
            root->key = temp->key;
            root->right = remove(root->right, temp->key);
        }
        return root;
    }
}

// Challenge : Printing all elements of BST which lie in range of k1 and k2
void printRange(Node *root, int k1, int k2)
{
    // Base case
    if (root == NULL)
    {
        return;
    }

    if (root->key >= k1 and root->key <= k2)
    {
        printRange(root->left, k1, k2);
        cout << root->key << " ";
        printRange(root->right, k1, k2);
    }

    else if (root->key > k2)
    {
        printRange(root->left, k1, k2);
    }
    else
    {
        printRange(root->right, k1, k2);
    }
}

// Root to Leaf Node
// void printRoot2LeafPaths(Node *root, vector<int> &path)
{
    //     // base case
    //     if (root == NULL)
    //     {
    //         return;
    //     }

    //     if (root->left == NULL and root->right == NULL)
    //     {
    //         for (int node : path)
    //         {
    //             cout << node << "->";
    //         }
    //         cout << root->key << " ";
    //         cout << endl;
    //         return;
    //     }

    //     // recursive case
    //     path.push_back(root->key);
    //     printRoot2LeafPaths(root->left, path);
    //     printRoot2LeafPaths(root->right, path);
    //     path.pop_back();
    //     return;
    // }

    int main()
    {
        Node *root = NULL;
        int arr[] = {8, 3, 10, 1, 6, 14, 4, 7, 13};
        // int arr[] = {1, 2, 4, -1, -1, 5, 7, -1, -1, -1, 3, -1, 6, -1, -1};

        for (int x : arr)
        {
            root = insert(root, x);
        }
        // int key;
        // cin >> key;
        // printInOrder(root);
        // cout << endl;
        // cout << search(root, key) << endl;
        // root = remove(root, key);
        // printInOrder(root);

        printRange(root, 5, 12);

        vector<int> path;
        // printRoot2LeafPaths(root, path);
        return 0;
    }
