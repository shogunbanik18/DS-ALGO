#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int key;
    Node *left;
    Node *right;

    Node(int key)
    {
        this->key = key;
        left = right = NULL;
    }
};

// inorder traversal
Node *insert(Node *root, int key)
{
    // base case
    if (root == NULL)
    {
        return new Node(key);
    }

    // recursive case
    if (key < root->key)
    {
        root->left = insert(root->left, key);
    }
    else
    {
        root->right = insert(root->right, key);
    }
    return root;
}

bool check(Node *root, int min, int max)
{
    // base case
    if (root == NULL)
    {
        return true;
    }

    // overflow case
    if (root->key < min or root->key > max)
    {
        return false;
    }
    return check(root->left, min, root->key) and check(root->right, root->key, max);
}

bool isBst(Node *root)
{
    return check(root, INT_MIN, INT_MAX);
}

int main()
{
    Node *root = NULL;
    int arr[] = {8, 3, 10, 1, 6, 14, 4, 7, 13};

    for (int x : arr)
    {
        root = insert(root, x);
    }
    cout << isBst(root) << endl;
}



// gfg //
class Solution
{
    public:
    //Function to check whether a Binary Tree is BST or not.
    bool check(Node*root,int min,int max)
    {
        // base case
        if(root==NULL)
        {
            return true;
        }
        
        return check(root->left,min,root->data) and check(root->right,root->data,max) and (root->data>min && root->data<max);
    }
    
    bool isBST(Node* root) 
    {
        return check(root,INT_MIN,INT_MAX);
    }
    
};
